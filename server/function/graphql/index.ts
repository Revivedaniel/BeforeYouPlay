import { ApolloServer, gql} from "apollo-server-azure-functions";
import { Game, Video } from "../models/index.js";
import axios from "axios";
import generateGame from "../utils/generateGame.js";
import parseCompletion from "../utils/parseCompletion.js";
import submitNewGame from "../utils/submitNewGame.js";
import { PlatformDoc } from "../utils/types.js";
import { GraphQLError } from "graphql";
import "../config/connection.js";

const typeDefs = gql`

  type Game {
    title: String
    platforms: [String]
    gameId: Int
    imageName: String
    ageRatings: [AgeRating]
    releaseDates: [ReleaseDate]
    developers: [String]
    publishers: [String]
    genres: [String]
    summary: String
    gameModes: [String]
    series: String
    relatedGames: [String]
    credits: [Credit]
  }

  type AgeRating {
    title: String
    rating: String
  }

  type ReleaseDate {
    title: String
    date: String
  }

  type Credit {
    title: String
    entries: String
  }

  type FreshData {
    _id: ID
    game_id: ID
    created_at: String
    up_votes: Int
    down_votes: Int
    potentially_outdated: Boolean
    data: String
    data_title: String
    admin_approvals: Int
    votes_total: Int
    manually_typed: Boolean
  }

  type GameTitle {
    title: String
    imageName: String
    gameGenerated: Boolean
    lazyAfternoonContent: Boolean
    contentAddedDate: String
    platforms: [String]
    genres: [String]
  }

  type Search {
    games: [GameTitle]
  }

  type User {
    _id: ID
    username: String
    email: String
  }

  type Auth {
    token: ID
    user: User
  }

  type FeaturedGame {
    title: String
    imageName: String
    shortDescription: String
  }

  type Video {
    type: String
    gameTitle: String
    videoUrl: String
    dateAdded: String
  }

  type Query {
    user: User
    game(title: String!): Game
    games(page: Int!): [Game]
    searchGame(search: String!, page: Int!): Search
    featuredGame: FeaturedGame
    gamesByPlatform(platform: String!, page: Int!): Search
    allPlatforms: [String]
    allGameTitles(page: Int!): Search
    gameWithVideos(page: Int!): Search
    video(title: String!): Video
  }

  type Mutation {
    addUser(username: String!, email: String!, password: String!): Auth
    updateUser(username: String, email: String, password: String): User
    login(email: String!, password: String!): Auth
  }
`;

interface Context {
  user: {
    _id: string;
  };
}

interface GameTitle {
  title: string;
}

interface Page {
  page: number;
}

interface Search {
  search: string;
  page: number;
}

interface Platform {
  platform: string;
  page: number;
}

const resolvers = {
  Query: {
    game: async (parent: any, { title }: GameTitle) => {
      try {
        // search for the game title in the database
        let titleResponse = await axios({
          url: `${process.env.VGI_API_URI}/game-titles/by-title/${title}`,
          method: "GET",
          headers: {
            Accept: "application/json",
            "api-version": process.env.VGI_API_VERSION,
            "api-key": process.env.VGI_API_KEY
          },
        });
        // if it does not exist responde with 204
        if (titleResponse.status === 204) {
          return new GraphQLError("Game not found!");
        }
        
        // if it does exist, check if it was generated by the AI
        // if it was, return the game data
        // if it was not, generate the game with the AI
        if (titleResponse.data.gameGenerated) {
          let gameResponse = await axios({
            url: `${process.env.VGI_API_URI}/games/${title}`,
            method: "GET",
            headers: {
              Accept: "application/json",
              "api-version": process.env.VGI_API_VERSION,
              "api-key": process.env.VGI_API_KEY
            },
          });
          return gameResponse.data;
        } else {
            // Genrate the game with AI
            const generatedGameData = await generateGame(title);
            // parse the response for the JSON data
            const jsonResponse = parseCompletion(generatedGameData, title);
            // submit the new game to the VGI database
            const newGame = await submitNewGame(jsonResponse, titleResponse.data.imageName);
            
            return newGame;
        }
      } catch (error) {
        console.log(error);
      }
    },
    games: async (parent: any, { page }: Page) => {
      const limit = 15;
      const offset = page - 1 * limit;

      try {
        let games = await Game.find({}).skip(offset).limit(limit).sort({ _id: -1 });
        return games;
      } catch (error) {
        console.log(error);
      }
    },
    searchGame: async (parent: any, { search, page }: Search) => {
      try {
        let response = await axios({
          url: `${process.env.VGI_API_URI}/game-titles/search?q=${search}&limit=20&page=${page}`,
          method: "GET",
          headers: {
            Accept: "application/json",
            "api-version": process.env.VGI_API_VERSION,
            "api-key": process.env.VGI_API_KEY
          },
        });
        // if response is empty, return empty
        if (response.data.length === 0) {
          return { statusCode: 204, games: [] as any };
        }

        return { games: response.data };
      } catch (error) {
        console.log(error);
      }
    },
    featuredGame: async () => {
      try {
        let response = await axios({
          url: `${process.env.VGI_API_URI}/game-titles/with-content?&limit=1&page=1`,
          method: "GET",
          headers: {
            Accept: "application/json",
            "api-version": process.env.VGI_API_VERSION,
            "api-key": process.env.VGI_API_KEY
          },
        });
        // if response is empty, return empty
        if (response.data.length === 0) {
          return;
        }
        const gameResponse = await await axios({
          url: `${process.env.VGI_API_URI}/games/${response.data[0].title}`,
          method: "GET",
          headers: {
            Accept: "application/json",
            "api-version": process.env.VGI_API_VERSION,
            "api-key": process.env.VGI_API_KEY
          },
        });
        const featuredGame = {
          title: response.data[0].title,
          imageName: response.data[0].imageName,
          shortDescription: JSON.parse(gameResponse.data.summary)['Gameplay Mechanics'].substring(0, 89)
        };
        return featuredGame;
      } catch (error) {
        console.log(error);
      }
    },
    gamesByPlatform: async (parent: any, { platform, page }: Platform) => {
      try {
        let response = await axios({
          url: `${process.env.VGI_API_URI}/game-titles/by-platform?platform=${platform}&limit=20&page=${page}`,
          method: "GET",
          headers: {
            Accept: "application/json",
            "api-version": process.env.VGI_API_VERSION,
            "api-key": process.env.VGI_API_KEY
          },
        });
        // if response is empty, return empty
        if (response.data.length === 0) {
          return { statusCode: 204, games: [] as any };
        }

        return { games: response.data };
      } catch (error) {
        console.log(error);
      }
    },
    allPlatforms: async () => {
      try {
        let response = await axios({
          // url: `${process.env.VGI_API_URI}/platforms`,
          url: `${process.env.VGI_API_URI}/platforms`,
          method: "GET",
          headers: {
            Accept: "application/json",
            "api-version": process.env.VGI_API_VERSION,
            "api-key": process.env.VGI_API_KEY
          },
        });

        response.data = response.data.map((platform: PlatformDoc) => {
          return platform.name;
        });

        return response.data;
      } catch (error) {
        console.log(error);
      }
    },
    allGameTitles: async (parent: any, { page }: Page) => {
      try {
        let response = await axios({
          url: `${process.env.VGI_API_URI}/game-titles?page=${page}`,
          method: "GET",
          headers: {
            Accept: "application/json",
            "api-version": process.env.VGI_API_VERSION,
            "api-key": process.env.VGI_API_KEY
          },
        });

        return { games: response.data };
      } catch (error) {
        console.log(error);
      }
    },
    gameWithVideos: async (parent: any, { page }: Page) => {
      try {
        let response = await axios({
          url: `${process.env.VGI_API_URI}/game-titles/with-content?&limit=20&page=${page}`,
          method: "GET",
          headers: {
            Accept: "application/json",
            "api-version": process.env.VGI_API_VERSION,
            "api-key": process.env.VGI_API_KEY
          },
        });
        // if response is empty, return empty
        if (response.data.length === 0) {
          return { statusCode: 204, games: [] as any };
        }
        return { games: response.data.slice(1) };
      } catch (error) {
        console.log(error);
      }
    },
    video: async (parent: any, { title }: GameTitle) => {
      try {
        // find a video by gameTitle
        // if video is found, return the video
        // if video is not found, return 204
        const videoData = Video.findOne({ gameTitle: title });

        if (videoData) {
          return videoData;
        }

        return { statusCode: 204, video: {} };
      } catch (error) {
        console.log(error);
      }
    },
  },
  Mutation: {}
};

// @ts-ignore
const server = new ApolloServer({
  typeDefs,
  resolvers,
  debug: true
});

export default server.createHandler({
  cors: {
    origin: "*",
    methods: ["GET", "POST", "OPTIONS"],
    allowedHeaders: ["access-control-allow-credentials", "access-control-allow-origin", "content-type"]
  },
});